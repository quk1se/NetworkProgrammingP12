Сокети. Клієнт-серверне програмування.
Сокет - технологія, яка приховує деталі інформаційного обміну між учасниками.
Один з них "пише у сокет", інший "читає з сокету". Деталі передачі даних
від точки "запису" до точки "читання" і приховуються під формалізмом "сокет".

Мережа (комп'ютерна) - сукупність вузлів та зв'язків (каналів зв'язку).
Вузол у мережі - ПК, принтер, роутер, інший пристрій, здатний виконувати
певні задачі (перетворювати дані). Канал - спосіб забезпечення обміну
даними (електричні дроти, оптичні кабелі, бездротові канали і т.п.)

Самостійно розібрати: топологія мережі, мережна технологія, мережний (
транспортний) протокол

У вузлі (мережі) може одночасно виконуватись декілька програм, кожна з яких
вимагає мережного трафіку. Для їх розрізнення вживається термін "порт" (
мережний порт) - це ціле число, яке можна вважати номером програми.
Сам мережний вузол ідентифікується мережною адресою, наприклад (у TCP/IP) - 
ІР-адресою. Це теж число, яке записується у розділеній формі
IPv4 - 32 біти, записані по байтам (192.168.10.221)
IPv6 - 128 біт зі своїми правилами запису (::1)

Аналогія: поштове відділення має адресу (Садова, 2), але за цією адресою
є багато поштових скринь і для доставлення листа треба зазначити номер скрині
Існують традиції (але не заборони), згідно з якими популярні програми
резервують "свої" порти
Браузер - 80, 443
FTP - 21
MySQL - 3306

Повна адреса програми (точки підключення сокету) - це комбінація IP:port,
яка також називається EndPoint

Клієнт-серверна технологія
Архітектура проєкту (комплексу) за якої ролі мережних вузлів розподілені
як "клієнт" та "сервер".
Ролі визначають порядок взаємодії:
 сервер стартує першим і знаходиться у постійному "слуханні"
 клієнт стартує у будь-який момент, "викликає" сервер (підключається)
 далі порядок роботи визначається прикладним протоколом, наприклад,
  спочатку "пише" клієнт, сервер "читає"
  потім навпаки
Технологія дозволяє
 - виконувати сервісну роботу (обробляти/постачати дані)
 - забезпечувати комунікацію клієнтів, причому зберігати "звернення"
    якщо один з клієнтів не на зв'язку

    Server             Client
 (1) Listen
          
                     ___Connect (2)
 (3) Accept__/socket/

             <-------Send (4) 
 (5) Receive
 (6) Send ----------> 
                     Receive (7) 

------------------------------------------------------------
Вузол 1 (IP1)                   Вузол 2 (IP2)
        port 1  [         / connect(IP1:port3)
        port 2  [       /
  |---> port 3  [ <---<
  |     port 4  [       \
  |     port 5  [         \        Вузол 3
  |     port 7  [           connect(IP1:port3)  
  |     .........
  |
  |
sever (listen port 3)
--------------------------------------------------------------------
                (вузол)
Вузол 1 (IP1)   router
        port 1  [   1]          Вузол 2 (IP2)
        port 2  [   2]        connect(IP1:port5)
  |---> port 3  [-  3]       / 
  |     port 4  [ | 4]      /
  |     port 5  [  -5]<---<
  |     port 7  [   6]      \ 
  |     .........            \   Вузол 3
  |                           connect(IP1:port5) 
  |
sever (listen port 3)